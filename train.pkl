import numpy as np
from sklearn.model_selection import train_test_split
from torch import q_scale

# Split dataset
X = q_scale.drop(columns='target')
y = q_scale['target']

X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)


from sklearn.ensemble import RandomForestRegressor
from sklearn.metrics import mean_absolute_error, mean_squared_error, r2_score

# Train the model
model = RandomForestRegressor(n_estimators=100, random_state=42)
model.fit(X_train, y_train)

# Predictions
y_pred = model.predict(X_test)

# Evaluate the model
mae = mean_absolute_error(y_test, y_pred)
rmse = np.sqrt(mean_squared_error(y_test, y_pred))
r2 = r2_score(y_test, y_pred)

print(f"MAE: {mae}, RMSE: {rmse}, R²: {r2}")


from sklearn.model_selection import GridSearchCV

# GridSearch for hyperparameter optimization
param_grid = {
    'n_estimators': [50, 100, 200],
    'max_depth': [None, 10, 20, 30],
    'min_samples_split': [2, 5, 10]
}

grid_search = GridSearchCV(estimator=RandomForestRegressor(random_state=42), param_grid=param_grid, cv=3)
grid_search.fit(X_train, y_train)

# Best parameters
print("Best parameters:", grid_search.best_params_)

# Evaluate the optimized model
y_pred_optimized = grid_search.best_estimator_.predict(X_test)
r2_optimized = r2_score(y_test, y_pred_optimized)
print(f"Optimized R²: {r2_optimized}")


import joblib

# Save the model
joblib.dump(grid_search.best_estimator_, 'house_price_predictor.pkl')


